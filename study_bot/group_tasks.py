#!/usr/bin/env python3
"""
ูุญุฏุฉ ููุงู ุงููุฌููุนุงุช
ุชุญุชูู ุนูู ูุธุงุฆู ููุชุนุงูู ูุน ููุงู ุงููุฌููุนุงุช ุฐุงุช ุงููููุฉ ุงูุฒูููุฉ
ุชู ุชุทููุฑู ููุดูู ุฌุฏุงูู ุตุจุงุญูุฉ ููุณุงุฆูุฉ ูุชูุงููุฉ
"""

import random
import logging
import requests
from datetime import datetime, timedelta

from study_bot.config import logger, TELEGRAM_API_URL, get_current_time
from study_bot.models import db, User, Group, GroupScheduleTracker, GroupTaskTracker, MotivationalMessage
from study_bot.models.group import GroupTaskParticipant, GroupTaskParticipation

# ุฏุงูุฉ ูุฅุฑุณุงู ุฑุณุงูุฉ ุฅูู ุงููุณุชุฎุฏู ุฃู ุงููุฌููุนุฉ
def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุฅูู ูุณุชุฎุฏู ุฃู ูุฌููุนุฉ"""
    try:
        # ุจูุงุก ุฑุงุจุท API
        url = f"{TELEGRAM_API_URL}/sendMessage"
        
        # ุจูุงุก ุงูุจูุงูุงุช
        data = {
            "chat_id": chat_id,
            "text": text,
            "disable_web_page_preview": True
        }
        
        if reply_markup:
            data["reply_markup"] = reply_markup
            
        if parse_mode:
            data["parse_mode"] = parse_mode
        
        # ุฅุฑุณุงู ุงูุทูุจ
        response = requests.post(url, json=data)
        response_data = response.json()
        
        if not response_data.get('ok', False):
            logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ: {response_data}")
            return None
        
        return response_data.get('result')
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ: {e}")
        return None

# ุงูุฅุฌุงุจุฉ ุนูู ูุฏุงุก ุงูุงุณุชุฌุงุจุฉ
def answer_callback_query(callback_query_id, text=None, show_alert=False):
    """ุงูุฅุฌุงุจุฉ ุนูู ูุฏุงุก ุงูุงุณุชุฌุงุจุฉ"""
    try:
        import requests
        from study_bot.config import TELEGRAM_API_URL
        
        # ุจูุงุก ุฑุงุจุท API
        url = f"{TELEGRAM_API_URL}/answerCallbackQuery"
        
        # ุจูุงุก ุงูุจูุงูุงุช
        data = {
            "callback_query_id": callback_query_id,
            "cache_time": 0
        }
        
        if text:
            data["text"] = text
            
        if show_alert:
            data["show_alert"] = True
        
        # ุฅุฑุณุงู ุงูุทูุจ
        response = requests.post(url, json=data)
        response_data = response.json()
        
        if not response_data.get('ok', False):
            logger.error(f"ุฎุทุฃ ูู ุงูุฅุฌุงุจุฉ ุนูู ูุฏุงุก ุงูุงุณุชุฌุงุจุฉ: {response_data}")
            return False
            
        return True
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุงูุฅุฌุงุจุฉ ุนูู ูุฏุงุก ุงูุงุณุชุฌุงุจุฉ: {e}")
        return False

# ุชุญููุฒุงุช ุฅุถุงููุฉ ููุนุฑุถ ูุน ุงูููุงู
MOTIVATIONAL_QUOTES = [
    "ุงูุถู ูุฏูุงูุ ุญุชู ุนูุฏูุง ุชููู ุงูุฎุทูุฉ ุตุนุจุฉ ูุงูุทุฑูู ุทูููุฉ.",
    "ุงููุฌุงุญ ููุณ ููุงุฆูุงูุ ูุงููุดู ููุณ ูุงุชูุงูุ ุงูุดุฌุงุนุฉ ููููุงุตูุฉ ูู ูุง ููู.",
    "ุงููุฐุงูุฑุฉ ุงูููู ุชุนูู ุงููุฌุงุญ ุบุฏุงู.",
    "ูู ุชุนุจ ุณุงุนุฉ ุชูุนู ุฃูู ุณุงุนุฉ.",
    "ููุณ ุงูููู ุฃู ุชุจุฏุฃ ุจููุฉุ ุงูุฃูู ุฃู ุชุณุชูุฑ ุจุนุฒููุฉ.",
    "ุงูุนูู ููุฑุ ูุงูุชุฑููุฒ ููุชุงุญู.",
    "ุงูุงุณุชุซูุงุฑ ูู ุงูุนูู ูุนุทู ุฃูุถู ุงูููุงุฆุฏ.",
    "ุฑุบู ุงูุชุนุจ ูุงูุณูุฑุ ุณุชุจูู ุงููุฑุญุฉ ุฃูุจุฑ.",
    "ุฌุจุงู ุงููุฌุงุญ ูุง ูููู ุชุณูููุง ุจุฃูุฏู ูู ุงูุฌููุจ.",
    "ูุง ููุช ูููุณูุ ูู ุฏูููุฉ ููุง ุซูู."
]

# ุงุณุชูุฑุงุฏ ูุงุฆูุฉ ููุงู ุงููุนุณูุฑุงุช ูู ููู ุฌุฏููุฉ ุงููุนุณูุฑุงุช
from study_bot.camp_scheduler import MORNING_REMINDERS, EVENING_REMINDERS

# ุชุญููู ุงูููุงู ูู ุงูุชูุณูู ุงูุฌุฏูุฏ ุฅูู ุงูุชูุณูู ุงููุฏูู
MORNING_SCHEDULE = []
for i, reminder in enumerate(MORNING_REMINDERS):
    time_str = reminder[0]
    task_name = f"morning_task_{i}"
    message_text = reminder[1]
    points = reminder[2]
    MORNING_SCHEDULE.append((time_str, task_name, message_text, points))

# ุชุญููู ุงูููุงู ุงููุณุงุฆูุฉ ูู ุงูุชูุณูู ุงูุฌุฏูุฏ ุฅูู ุงูุชูุณูู ุงููุฏูู
EVENING_SCHEDULE = []
for i, reminder in enumerate(EVENING_REMINDERS):
    time_str = reminder[0]
    task_name = f"evening_task_{i}"
    message_text = reminder[1]
    points = reminder[2]
    EVENING_SCHEDULE.append((time_str, task_name, message_text, points))

# ููุงุท ุงูููุงู ููุฌุฏุงูู
MORNING_POINTS = 2
EVENING_POINTS = 2

# ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงูุตุจุงุญู ูููุฌููุนุฉ
def send_group_morning_message(group_telegram_id):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงูุตุจุงุญู ูููุฌููุนุฉ"""
    try:
        # ุงุฎุชูุงุฑ ุงูุชุจุงุณ ุชุญููุฒู ุนุดูุงุฆู
        motivation = random.choice(MOTIVATIONAL_QUOTES)
        
        # ุฅูุดุงุก ุฑุณุงูุฉ ุงูุชุฑุญูุจ
        welcome_text = f"""
๐ โญโโโโโโโโโโโโโโโโโโโโโโโฎ
      ุฌุฏูู ุงููุนุณูุฑ ุงูุตุจุงุญู
โฐโโโโโโโโโโโโโโโโโโโโโโโฏ

ูุฑุญุจุงู ุจูู ูู ูุนุณูุฑ ุงูุฏุฑุงุณุฉ ุงูุตุจุงุญู!
ููุจุฏุฃ ูููุงู ูููุฆุงู ุจุงูุฅูุฌุงุฒ ูุงูุชุฑููุฒ ๐

โฐ ุงูููุงู ุงููุงุฏูุฉ ุฎูุงู ุงูููู:
๐ธ ุงููุฌุฑ 04:25
๐ธ ุงููุฐุงูุฑุฉ 08:30
๐ธ ุงูุธูุฑ 12:51 
๐ธ ุงูุนุตุฑ 16:28
๐ธ ุงููุบุฑุจ 19:39
๐ธ ุงูุนุดุงุก 21:06

๐ {motivation}

ููุง ุจูุง ูุจุฏุฃ! ๐ช
"""
        
        # ุฅุถุงูุฉ ุฒุฑ ููุงูุถูุงู ูููุนุณูุฑ
        keyboard = {
            "inline_keyboard": [
                [{
                    "text": "โ ุงูุถู ูููุนุณูุฑ ุงูุตุจุงุญู",
                    "callback_data": "join_morning_camp"
                }]
            ]
        }
        
        # ุฅุฑุณุงู ุงูุฑุณุงูุฉ
        result = send_message(group_telegram_id, welcome_text, reply_markup=keyboard, parse_mode="HTML")
        logger.info(f"ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงูุตุจุงุญู ูููุฌููุนุฉ {group_telegram_id}")
        return result
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงูุตุจุงุญู ูููุฌููุนุฉ {group_telegram_id}: {e}")
        return None


# ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงููุณุงุฆู ูููุฌููุนุฉ
def send_group_evening_message(group_telegram_id):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงููุณุงุฆู ูููุฌููุนุฉ"""
    try:
        # ุงุฎุชูุงุฑ ุงูุชุจุงุณ ุชุญููุฒู ุนุดูุงุฆู
        motivation = random.choice(MOTIVATIONAL_QUOTES)
        
        # ุฅูุดุงุก ุฑุณุงูุฉ ุงูุชุฑุญูุจ
        welcome_text = f"""
๐ โญโโโโโโโโโโโโโโโโโโโโโโโฎ
      ุฌุฏูู ุงููุนุณูุฑ ุงููุณุงุฆู
โฐโโโโโโโโโโโโโโโโโโโโโโโฏ

ูุฑุญุจุงู ุจูู ูู ูุนุณูุฑ ุงูุฏุฑุงุณุฉ ุงููุณุงุฆู!
ููุช ุงููุฐุงูุฑุฉ ุงููุฑูุฒุฉ ูุงูุฅูุฌุงุฒุงุช ุงูุนุธููุฉ ๐

โฐ ุงูููุงู ุงููุงุฏูุฉ ุฎูุงู ุงูููู:
๐ธ ุงูุจุฏุงูุฉ 16:00
๐ธ ุงูุนุดุงุก 20:00
๐ธ ุงูุฏุฑุงุณุฉ 20:30
๐ธ ุงูุนุดุงุก 21:10
๐ธ ุงุณุชุฑุงุญุฉ 01:00
๐ธ ุชูููู 04:05
๐ธ ุงููุฌุฑ 04:25

๐ {motivation}

ููุง ุจูุง ูุจุฏุฃ! ๐ช
"""
        
        # ุฅุถุงูุฉ ุฒุฑ ููุงูุถูุงู ูููุนุณูุฑ
        keyboard = {
            "inline_keyboard": [
                [{
                    "text": "โ ุงูุถู ูููุนุณูุฑ ุงููุณุงุฆู",
                    "callback_data": "join_evening_camp"
                }]
            ]
        }
        
        # ุฅุฑุณุงู ุงูุฑุณุงูุฉ
        result = send_message(group_telegram_id, welcome_text, reply_markup=keyboard, parse_mode="HTML")
        logger.info(f"ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงููุณุงุฆู ูููุฌููุนุฉ {group_telegram_id}")
        return result
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฌุฏูู ุงููุณุงุฆู ูููุฌููุนุฉ {group_telegram_id}: {e}")
        return None


# ุฅุฑุณุงู ุฑุณุงูุฉ ุชุญููุฒูุฉ ูููุฌููุนุฉ
def send_motivation_to_group(group_telegram_id):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุชุญููุฒูุฉ ูููุฌููุนุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุฑุณุงูุฉ ุชุญููุฒูุฉ ุนุดูุงุฆูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        motivational_message = MotivationalMessage.query.order_by(db.func.random()).first()
        
        # ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุฑุณุงุฆู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุณุชุฎุฏู ุงูุฑุณุงุฆู ุงููุถููุฉ
        if not motivational_message:
            motivation_text = random.choice(MOTIVATIONAL_QUOTES)
        else:
            motivation_text = motivational_message.message
        
        # ุฅูุดุงุก ุฑุณุงูุฉ ุชุญููุฒูุฉ ูุงููุฉ
        full_text = f"""
โจ <b>ุฑุณุงูุฉ ุชุญููุฒูุฉ:</b>

"{motivation_text}"

๐ฅ ุงุณุชูุฑ ูู ุงูุชูุฏู! ุงูุฅูุฌุงุฒ ููุชุธุฑู.
"""
        
        # ุฅุฑุณุงู ุงูุฑุณุงูุฉ
        result = send_message(group_telegram_id, full_text, parse_mode="HTML")
        logger.info(f"ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุชุญููุฒูุฉ ูููุฌููุนุฉ {group_telegram_id}")
        return result
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุชุญููุฒูุฉ ูููุฌููุนุฉ {group_telegram_id}: {e}")
        return None


# ุฅุฑุณุงู ุฑุณุงูุฉ ุชุญููุฒูุฉ (ููุฌูุฉ ูู ุฎุงุฑุฌ ุงูููู)
def send_motivational_quote(group_id):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุชุญููุฒูุฉ ูููุฌููุนุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุงููุฌููุนุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        group = Group.query.get(group_id)
        if not group:
            logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุฌููุนุฉ {group_id}")
            return False
            
        # ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุงูุชุญููุฒูุฉ
        result = send_motivation_to_group(group.telegram_id)
        return result is not None
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุชุญููุฒูุฉ ูููุฌููุนุฉ {group_id}: {e}")
        return False


# ุฅุถุงูุฉ ูุณุชุฎุฏู ุฅูู ุฌุฏูู ุงููุฌููุนุฉ
def add_user_to_schedule(group_id, user_id, schedule_type):
    """ุฅุถุงูุฉ ูุณุชุฎุฏู ุฅูู ุฌุฏูู ุงููุฌููุนุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุจูุงูุงุช ุงููุณุชุฎุฏู
        user = User.get_or_create(user_id)
        
        # ุงูุญุตูู ุนูู ุจูุงูุงุช ุงููุฌููุนุฉ
        group = Group.query.get(group_id)
        if not group:
            logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุฌููุนุฉ {group_id}")
            return False
            
        # ุฅุถุงูุฉ ุงููุณุชุฎุฏู ููุดุงุฑู ูู ุงููุฌููุนุฉ
        group_participant = GroupTaskParticipant.get_or_create(group.id, user.id)
        
        # ุงูุญุตูู ุนูู ุชุชุจุน ุฌุฏูู ุงููุฌููุนุฉ ูููู ุงูููู
        schedule = GroupScheduleTracker.get_or_create_for_today(group.id, schedule_type)
        
        # ุชุนููู ุงููุณุชุฎุฏู ููุดุงุฑู ูู ุงูุฌุฏูู
        schedule.add_participant(user.id)
        
        logger.info(f"ุชู ุฅุถุงูุฉ ุงููุณุชุฎุฏู {user_id} ุฅูู ุงูุฌุฏูู {schedule_type} ูููุฌููุนุฉ {group_id}")
        return True
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุถุงูุฉ ุงููุณุชุฎุฏู {user_id} ุฅูู ุงูุฌุฏูู {schedule_type} ูููุฌููุนุฉ {group_id}: {e}")
        return False


# ุฅุฑุณุงู ุฑุณุงูุฉ ูููุฉ ูุน ูููุฉ ุฒูููุฉ ูููุดุงุฑูุฉ
def send_group_task_message(group_id, task_type, text, points=1, deadline_minutes=10):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ูููุฉ ูููุฌููุนุฉ ูุน ุฒุฑ ูููุดุงุฑูุฉ ููููุฉ ุฒูููุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุงููุฌููุนุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        group = Group.query.get(group_id)
        if not group:
            logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุฌููุนุฉ {group_id}")
            return None
            
        # ุงูุญุตูู ุนูู ุชุชุจุน ุฌุฏูู ุงููุฌููุนุฉ ูููู ุงูููู
        schedule_type = 'morning' if group.morning_schedule_enabled else 'evening' if group.evening_schedule_enabled else 'custom'
        schedule = GroupScheduleTracker.get_or_create_for_today(group_id, schedule_type)
        
        # ุฅุถุงูุฉ ุฒุฑ ูููุดุงุฑูุฉ ูู ุงููููุฉ
        deadline_text = f"โฐ ููููู ุงูุงูุถูุงู ุฎูุงู {deadline_minutes} ุฏูุงุฆู ููุท"
        
        # ุฅุถุงูุฉ ูุนูููุงุช ุงูููุงุท
        points_text = f"๐ ุณุชุญุตู ุนูู {points} ููุงุท ุนูุฏ ุงููุดุงุฑูุฉ"
        
        # ุฅูุดุงุก ูุต ุงูุฑุณุงูุฉ ุงููุงูู
        full_text = f"{text}\n\n{deadline_text}\n{points_text}"
        
        # ุฅูุดุงุก ุฒุฑ ุงููุดุงุฑูุฉ
        keyboard = {
            "inline_keyboard": [
                [{
                    "text": "โ ุงูุถู ูููููุฉ",
                    "callback_data": f"task_join:{task_type}:{schedule.id}"
                }]
            ]
        }
        
        # ุฅุฑุณุงู ุงูุฑุณุงูุฉ
        message = send_message(group.telegram_id, full_text, reply_markup=keyboard, parse_mode="HTML")
        if not message:
            logger.error(f"ูุดู ุฅุฑุณุงู ุฑุณุงูุฉ ุงููููุฉ ูููุฌููุนุฉ {group.telegram_id}")
            return None
            
        # ุฅูุดุงุก ุณุฌู ุงููููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        task = GroupTaskTracker.create_task(
            schedule_id=schedule.id,
            task_type=task_type,
            message_id=message.get('message_id'),
            deadline_minutes=deadline_minutes,
            points=points
        )
        
        logger.info(f"ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุงููููุฉ {task_type} ูููุฌููุนุฉ {group.telegram_id}")
        return task
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุงููููุฉ {task_type} ูููุฌููุนุฉ {group_id}: {e}")
        return None


# ูุนุงูุฌุฉ ุทูุจ ุงูุงูุถูุงู ููููุฉ
def handle_task_join(task_type, schedule_id, user_id, chat_id, callback_query_id):
    """ูุนุงูุฌุฉ ุทูุจ ุงูุงูุถูุงู ููููุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุงููููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        schedule_id = int(schedule_id)
        task = GroupTaskTracker.query.filter_by(schedule_id=schedule_id, task_type=task_type).first()
        
        if not task:
            logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฉ {task_type} ููุฌุฏูู {schedule_id}")
            answer_callback_query(callback_query_id, "โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฉ ุงููุญุฏุฏุฉ.", True)
            return False
            
        # ุชุญูู ูู ุงููููุฉ ุงูุฒูููุฉ
        if not task.is_active():
            answer_callback_query(callback_query_id, "โฐ ุงูุชูุช ุงููููุฉ ุงููุญุฏุฏุฉ ูููููุฉ.", True)
            return False
        
        # ุงูุญุตูู ุนูู ุจูุงูุงุช ุงููุณุชุฎุฏู
        user = User.get_or_create(user_id)
        
        # ุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุฏ ุงูุถู ุจุงููุนู
        if task.has_user_joined(user.id):
            answer_callback_query(callback_query_id, "โ ุฃูุช ููุถู ุจุงููุนู ููุฐู ุงููููุฉ!", True)
            return True
        
        # ุฅุถุงูุฉ ุงููุณุชุฎุฏู ุฅูู ุงููููุฉ
        success = task.add_participant(user.id)
        if success:
            # ุญุณุงุจ ุงูููุงุท ุจูุงุกู ุนูู ููุน ุงูุฌุฏูู
            points = task.points
            
            # ุฅุถุงูุฉ ุงูููุงุท ุฅูู ุงููุณุชุฎุฏู
            user.add_points(points)
            
            # ุฒูุงุฏุฉ ุนุฏุฏ ุงูููุงู ุงูููุชููุฉ
            user.increment_tasks_completed()
            
            # ุญูุธ ุงูุชุบููุฑุงุช
            db.session.commit()
            
            answer_callback_query(callback_query_id, f"โ ุชู ุชุณุฌูู ุงูุถูุงูู ูููููุฉ! +{points} ููุทุฉ", True)
            logger.info(f"ุชู ุชุณุฌูู ุงูุถูุงู ุงููุณุชุฎุฏู {user_id} ูููููุฉ {task_type}")
            return True
        else:
            answer_callback_query(callback_query_id, "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุณุฌูู ุงูุถูุงูู ูููููุฉ.", True)
            return False
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุทูุจ ุงูุงูุถูุงู ูููููุฉ {task_type}: {e}")
        answer_callback_query(callback_query_id, "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู.", True)
        return False


# ุงูุญุตูู ุนูู ุงูุงุณู ุงูุนุฑุจู ูููููุฉ
def get_task_name(task_type):
    """ุงูุญุตูู ุนูู ุงูุงุณู ุงูุนุฑุจู ูููููุฉ"""
    task_names = {
        "daily_plan": "ุฎุทุฉ ุงูููู ุงูุฏุฑุงุณู",
        "prayer_1": "ุตูุงุฉ ุงููุฌุฑ",
        "breakfast": "ุงููุทูุฑ ูุงูุฑุงุญุฉ",
        "back_to_study": "ุงูุนูุฏุฉ ูููุฐุงูุฑุฉ",
        "short_break": "ุงุณุชุฑุงุญุฉ ูุตูุฑุฉ",
        "back_after_break": "ุงูุนูุฏุฉ ุจุนุฏ ุงูุฑุงุญุฉ",
        "prayer_2": "ุตูุงุฉ ุงูุธูุฑ",
        "after_prayer_study": "ุงููุฐุงูุฑุฉ ุจุนุฏ ุงูุตูุงุฉ",
        "nap_time": "ููุช ุงููููููุฉ",
        "wake_up": "ุงูุงุณุชููุงุธ",
        "prayer_3": "ุตูุงุฉ ุงูุนุตุฑ",
        "study_3": "ุงููุฐุงูุฑุฉ ุงููุณุงุฆูุฉ",
        "prayer_4": "ุตูุงุฉ ุงููุบุฑุจ",
        "prayer_5": "ุตูุงุฉ ุงูุนุดุงุก",
        "evaluation": "ุชูููู ุงูููู",
        "evening_plan": "ุงููุฏู ุงููููู ุงูุฏุฑุงุณู",
        "evening_study": "ููุช ุงูุฅูุฌุงุฒ ุงูุญูููู",
        "dinner_break": "ุงุณุชุฑุงุญุฉ ุงูุนุดุงุก",
        "night_study": "ุงูุนูุฏุฉ ูููุฐุงูุฑุฉ",
        "qiyam": "ููุงู ุงูููู",
        "long_break": "ุงุณุชุฑุงุญุฉ ุทูููุฉ",
        "night_evaluation": "ุชูููู ุงูููู"
    }
    
    return task_names.get(task_type, "ูููุฉ ุบูุฑ ูุนุฑููุฉ")


# ุฅุฑุณุงู ูููุฉ ุจูุงุกู ุนูู ููุนูุง ูููุน ุงูุฌุฏูู
def send_task_by_type(group_id, task_type, schedule_type='morning'):
    """ุฅุฑุณุงู ูููุฉ ุจูุงุกู ุนูู ููุนูุง ูููุน ุงูุฌุฏูู"""
    try:
        # ุงูุญุตูู ุนูู ุงููุฌููุนุฉ
        group = Group.query.get(group_id)
        if not group:
            logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุฌููุนุฉ {group_id}")
            return False
            
        # ุงูุจุญุซ ุนู ุงููููุฉ ูู ุงูุฌุฏูู ุงูููุงุณุจ
        schedule = MORNING_SCHEDULE if schedule_type == 'morning' else EVENING_SCHEDULE
        task_item = None
        
        for item in schedule:
            if item[1] == task_type:
                task_item = item
                break
                
        if not task_item:
            logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฉ {task_type} ูู ุงูุฌุฏูู {schedule_type}")
            return False
            
        # ุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงููููุฉ
        _, task_type, text, points = task_item
        
        # ุฅุฑุณุงู ุฑุณุงูุฉ ุงููููุฉ
        result = send_group_task_message(group_id, task_type, text, points, deadline_minutes=15)
        return result is not None
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงููููุฉ {task_type} ูููุฌููุนุฉ {group_id}: {e}")
        return False


# ุฅุฑุณุงู ูููุฉ ุจูุงุกู ุนูู ููุช ูุญุฏุฏ ูุฌุฏูู ุงููุฌููุนุฉ
def send_scheduled_task(group_id, time_str, schedule_type='morning'):
    """ุฅุฑุณุงู ูููุฉ ุจูุงุกู ุนูู ููุช ูุญุฏุฏ ูุฌุฏูู ุงููุฌููุนุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุงููุฌููุนุฉ
        group = Group.query.get(group_id)
        if not group:
            logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุฌููุนุฉ {group_id}")
            return False
            
        # ุงูุจุญุซ ุนู ุงููููุฉ ูู ุงูุฌุฏูู ุงูููุงุณุจ ุจูุงุกู ุนูู ุงูููุช
        schedule = MORNING_SCHEDULE if schedule_type == 'morning' else EVENING_SCHEDULE
        tasks_for_time = [item for item in schedule if item[0] == time_str]
        
        if not tasks_for_time:
            logger.info(f"ูุง ุชูุฌุฏ ููุงู ูุฌุฏููุฉ ููููุช {time_str} ูู ุงูุฌุฏูู {schedule_type}")
            return False
            
        # ุฅุฑุณุงู ุงูููุงู ุงููุฌุฏููุฉ ููููุช ุงููุญุฏุฏ
        sent_count = 0
        for task_item in tasks_for_time:
            time_str, task_type, text, points = task_item
            result = send_group_task_message(group_id, task_type, text, points, deadline_minutes=15)
            if result:
                sent_count += 1
                
        logger.info(f"ุชู ุฅุฑุณุงู {sent_count} ูููุฉ ูููุฌููุนุฉ {group_id} ูู ุงูููุช {time_str}")
        return sent_count > 0
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูููุงู ุงููุฌุฏููุฉ ููููุช {time_str} ูููุฌููุนุฉ {group_id}: {e}")
        return False


# ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงูุตุจุงุญู ูููุฌููุนุงุช ุงููุดุทุฉ
def send_morning_schedule_tasks():
    """ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงูุตุจุงุญู ูููุฌููุนุงุช ุงููุดุทุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุงูููุช ุงูุญุงูู
        now = get_current_time()
        time_str = now.strftime("%H:%M")
        
        # ุชุณุฌูู ููุช ุงููุญุต
        logger.info(f"ูุญุต ููุงู ุงูุฌุฏูู ุงูุตุจุงุญู ููููุช {time_str}")
        
        # ุงูุญุตูู ุนูู ุงููุฌููุนุงุช ุงููุดุทุฉ ูุน ุชูุนูู ุงูุฌุฏูู ุงูุตุจุงุญู
        active_groups = Group.query.filter_by(is_active=True, morning_schedule_enabled=True).all()
        logger.info(f"ุชู ุงูุนุซูุฑ ุนูู {len(active_groups)} ูุฌููุนุฉ ูุดุทุฉ ูุน ุชูุนูู ุงูุฌุฏูู ุงูุตุจุงุญู")
        
        # ุฅุฑุณุงู ุงูููุงู ุงููุฌุฏููุฉ ููููุช ุงูุญุงูู
        sent_count = 0
        for group in active_groups:
            result = send_scheduled_task(group.id, time_str, 'morning')
            if result:
                sent_count += 1
                
        logger.info(f"ุชู ุฅุฑุณุงู {sent_count} ูููุฉ ุตุจุงุญูุฉ ููููุช {time_str}")
        return sent_count
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงูุตุจุงุญู: {e}")
        return 0


# ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงููุณุงุฆู ูููุฌููุนุงุช ุงููุดุทุฉ
def send_evening_schedule_tasks():
    """ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงููุณุงุฆู ูููุฌููุนุงุช ุงููุดุทุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุงูููุช ุงูุญุงูู
        now = get_current_time()
        time_str = now.strftime("%H:%M")
        
        # ุชุณุฌูู ููุช ุงููุญุต
        logger.info(f"ูุญุต ููุงู ุงูุฌุฏูู ุงููุณุงุฆู ููููุช {time_str}")
        
        # ุงูุญุตูู ุนูู ุงููุฌููุนุงุช ุงููุดุทุฉ ูุน ุชูุนูู ุงูุฌุฏูู ุงููุณุงุฆู
        active_groups = Group.query.filter_by(is_active=True, evening_schedule_enabled=True).all()
        logger.info(f"ุชู ุงูุนุซูุฑ ุนูู {len(active_groups)} ูุฌููุนุฉ ูุดุทุฉ ูุน ุชูุนูู ุงูุฌุฏูู ุงููุณุงุฆู")
        
        # ุฅุฑุณุงู ุงูููุงู ุงููุฌุฏููุฉ ููููุช ุงูุญุงูู
        sent_count = 0
        for group in active_groups:
            result = send_scheduled_task(group.id, time_str, 'evening')
            if result:
                sent_count += 1
                
        logger.info(f"ุชู ุฅุฑุณุงู {sent_count} ูููุฉ ูุณุงุฆูุฉ ููููุช {time_str}")
        return sent_count
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงููุณุงุฆู: {e}")
        return 0


# ูุญุต ูุฅุฑุณุงู ููุงู ุงููุฌููุนุงุช ุงููุฌุฏููุฉ
def check_group_schedule_tasks():
    """ูุญุต ูุฅุฑุณุงู ููุงู ุงููุฌููุนุงุช ุงููุฌุฏููุฉ"""
    try:
        # ุชุณุฌูู ุจุฏุก ุงููุญุต
        logger.info("ุจุฏุก ูุญุต ููุงู ุงููุฌููุนุงุช ุงููุฌุฏููุฉ")
        
        # ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงูุตุจุงุญู
        morning_count = send_morning_schedule_tasks()
        
        # ุฅุฑุณุงู ููุงู ุงูุฌุฏูู ุงููุณุงุฆู
        evening_count = send_evening_schedule_tasks()
        
        # ุชุณุฌูู ูุชุงุฆุฌ ุงููุญุต
        logger.info(f"ุชู ุฅุฑุณุงู {morning_count} ูููุฉ ุตุจุงุญูุฉ ู {evening_count} ูููุฉ ูุณุงุฆูุฉ")
        
        return morning_count + evening_count
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ูุญุต ููุงู ุงููุฌููุนุงุช ุงููุฌุฏููุฉ: {e}")
        return 0