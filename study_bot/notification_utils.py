"""
ูุญุฏุฉ ูุธุงุฆู ุงูุฅุดุนุงุฑุงุช
ุชุญุชูู ุนูู ูุธุงุฆู ุงูุฅุดุนุงุฑุงุช ุงููุดุชุฑูุฉ ุจูู ูุฎุชูู ูุญุฏุงุช ุงูุจูุช
"""

import json
import random
import uuid
import threading
import time
import traceback
from threading import Timer
from datetime import datetime, timedelta

from study_bot.config import logger, TELEGRAM_API_URL

# ูุงููุณ ูุชุฎุฒูู ุงููุคูุชุงุช
_activation_timers = {}
_timers_lock = threading.Lock()

def schedule_confirmation_message(chat_id, is_group=False, user_id=None, delay_seconds=120):
    """
    ุฌุฏููุฉ ุฑุณุงูุฉ ุชุฃููุฏ ุจุนุฏ ูุชุฑุฉ ุฒูููุฉ ูุญุฏุฏุฉ (ุงูุงูุชุฑุงุถู: ุฏูููุชุงู)
    """
    try:
        # ุฅูุดุงุก ูุนุฑู ูุฑูุฏ ูููุคูุช
        timer_id = str(uuid.uuid4())
        
        def send_confirmation_message():
            try:
                # ุงุณุชูุฑุงุฏ ุงููุธุงุฆู ููุง ูุชุฌูุจ ุงูุงุณุชูุฑุงุฏุงุช ุงูุฏุงุฆุฑูุฉ
                from study_bot.group_tasks import MOTIVATIONAL_QUOTES
                from study_bot.bot import send_message
                
                # ุฅุฎุชูุงุฑ ุฑุณุงูุฉ ุชุญููุฒูุฉ ุนุดูุงุฆูุฉ
                quote = random.choice(MOTIVATIONAL_QUOTES)
                
                # ุฅุถุงูุฉ ูุต ุงูุชุฃููุฏ
                confirmation_message = f"โ <b>ุชุฃููุฏ ุงูุชูุนูู</b>\n\nุชู ุชูุนูู ุจูุช ุงูุฏุฑุงุณุฉ ูุงูุชุญููุฒ ุจูุฌุงุญ.\n\n{quote}\n\n<i>ูุฑูู ุงููุทูุฑูู - @M_o_h_a_m_e_d_501</i>"
                
                # ุฅุฑุณุงู ุงูุฑุณุงูุฉ
                send_message(chat_id, confirmation_message)
                
                logger.info(f"ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฃููุฏ ุงูุชูุนูู ุฅูู {chat_id}")
                
                # ุฅุฐุง ูุงูุช ุงููุฌููุนุฉุ ุฃุฑุณู ุฑุณุงูุฉ ูููุดุฑู ูู ุงูุฎุงุต
                if is_group and user_id:
                    send_admin_private_message(chat_id, user_id)
                
                # ุฅุฒุงูุฉ ุงููุคูุช ูู ุงููุงููุณ
                with _timers_lock:
                    if timer_id in _activation_timers:
                        del _activation_timers[timer_id]
            except Exception as e:
                logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฃููุฏ ุงูุชูุนูู: {e}")
                logger.error(traceback.format_exc())
        
        # ุฅูุดุงุก ูุคูุช ูุฅุฑุณุงู ุงูุฑุณุงูุฉ ุจุนุฏ ุงููุฏุฉ ุงููุญุฏุฏุฉ
        timer = Timer(delay_seconds, send_confirmation_message)
        timer.daemon = True  # ุฌุนู ุงููุคูุช ุฎููู ูุฅููุงูู ุนูุฏ ุฅููุงู ุงูุชุทุจูู
        timer.start()
        
        # ุชุฎุฒูู ุงููุคูุช ููุฑุฌูุน ุฅููู ูุงุญูุงู
        with _timers_lock:
            _activation_timers[timer_id] = timer
        
        logger.info(f"ุชู ุฌุฏููุฉ ุฑุณุงูุฉ ุชุฃููุฏ ุงูุชูุนูู ูู {chat_id} ุจุนุฏ {delay_seconds} ุซุงููุฉ")
        return timer_id
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฌุฏููุฉ ุฑุณุงูุฉ ุชุฃููุฏ ุงูุชูุนูู: {e}")
        logger.error(traceback.format_exc())
        return None


def send_admin_private_message(group_id, admin_id):
    """
    ุฅุฑุณุงู ุฑุณุงูุฉ ูููุดุฑู ูู ุงูุฎุงุต ุจุนุฏ ุชูุนูู ุงูุจูุช ูู ูุฌููุนุฉ
    """
    try:
        # ุงุณุชูุฑุงุฏ ุงูููุงุฐุฌ ูุงููุธุงุฆู ููุง ูุชุฌูุจ ุงูุงุณุชูุฑุงุฏุงุช ุงูุฏุงุฆุฑูุฉ
        from study_bot.models import Group, User
        from study_bot.bot import send_message
        
        # ุงูุญุตูู ุนูู ูุนูููุงุช ุงููุฌููุนุฉ
        group = Group.query.filter_by(telegram_id=group_id).first()
        if not group:
            # ูุญุงููุฉ ุฌูุจ ุงููุฌููุนุฉ ุจุงููุนุฑู ุงูุฑููู
            group = Group.query.filter_by(id=group_id).first()
            if not group:
                logger.error(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุฌููุนุฉ ุจุงููุนุฑู {group_id}")
                return False
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู
        user = User.query.filter_by(telegram_id=admin_id).first()
        if not user:
            # ุฅูุดุงุก ูุณุชุฎุฏู ุฌุฏูุฏ ุฅุฐุง ูู ููู ููุฌูุฏูุง
            user = User(
                telegram_id=admin_id,
                is_active=True
            )
            from study_bot.models import db
            db.session.add(user)
            db.session.commit()
        
        # ุฅุฑุณุงู ุฑุณุงูุฉ ูููุดุฑู
        admin_message = f"""๐ <b>ูุฑุญุจุงู ุจู ูู ุจูุช ุงูุฏุฑุงุณุฉ ูุงูุชุญููุฒ!</b>

ุชู ุชูุนูู ุงูุจูุช ุจูุฌุงุญ ูู ูุฌููุนุฉ "{group.title}".

ุจุตูุชู ูุดุฑู ุงููุฌููุนุฉุ ููููู ุฅุฏุงุฑุฉ ุฅุนุฏุงุฏุงุช ุงูุจูุช ูู ููุง:
โข ุชูุนูู ุฌุฏุงูู ุฏุฑุงุณูุฉ (ุตุจุงุญูุฉ ุฃู ูุณุงุฆูุฉ)
โข ุฅูุดุงุก ูุนุณูุฑุงุช ุฏุฑุงุณูุฉ ูุฎุตุตุฉ
โข ุฅุฏุงุฑุฉ ุงูุฑุณุงุฆู ุงูุชุญููุฒูุฉ
โข ูุฑุงูุจุฉ ุฃุฏุงุก ุงููุฌููุนุฉ

ุงุณุชุฎุฏู ุงูุฃูุฑ /groups ูุนุฑุถ ุงููุฌููุนุงุช ุงูุชู ุชุฏูุฑูุง.
ุงุณุชุฎุฏู ุงูุฃูุฑ /camps ูุฅุฏุงุฑุฉ ุงููุนุณูุฑุงุช ุงูุฏุฑุงุณูุฉ.

ุชูุถู ุจุฒูุงุฑุฉ ูููุนูุง ูููุฒูุฏ ูู ุงููุนูููุงุช ูุงููุณุงุนุฏุฉ.
"""
        
        result = send_message(admin_id, admin_message)
        
        if result:
            logger.info(f"ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ูููุดุฑู {admin_id} ุจูุฌุงุญ")
            return True
        else:
            logger.error(f"ูุดู ุฅุฑุณุงู ุฑุณุงูุฉ ูููุดุฑู {admin_id}")
            return False
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ูููุดุฑู ูู ุงูุฎุงุต: {e}")
        logger.error(traceback.format_exc())
        return False


def schedule_task_reminder(user_id, task_name, task_type, time_minutes, ignore_preferences=False):
    """
    ุฌุฏููุฉ ุฑุณุงูุฉ ุชุฐููุฑ ุจูููุฉ ุจุนุฏ ูุชุฑุฉ ุฒูููุฉ ูุญุฏุฏุฉ ุจุงูุฏูุงุฆู
    """
    try:
        # ุงุณุชูุฑุงุฏ ุงูููุงุฐุฌ ููุง ูุชุฌูุจ ุงูุงุณุชูุฑุงุฏุงุช ุงูุฏุงุฆุฑูุฉ
        from study_bot.models import User, NotificationPreference
        
        # ุงูุชุญูู ูู ุชูุถููุงุช ุงูุฅุดุนุงุฑุงุช ูููุณุชุฎุฏู
        user = User.query.filter_by(telegram_id=user_id).first()
        if not user:
            logger.warning(f"ุงููุณุชุฎุฏู {user_id} ุบูุฑ ููุฌูุฏ")
            return None
        
        # ุงูุชุญูู ูู ุงูุฅุดุนุงุฑุงุช ุงูุฐููุฉ ุฅุฐุง ูู ูุชู ุชุฌุงูู ุงูุชูุถููุงุช
        if not ignore_preferences and not user.smart_notifications_enabled:
            logger.info(f"ุงูุฅุดุนุงุฑุงุช ุงูุฐููุฉ ูุนุทูุฉ ูููุณุชุฎุฏู {user_id}")
            return None
        
        # ุฅูุดุงุก ูุนุฑู ูุฑูุฏ ูููุคูุช
        timer_id = str(uuid.uuid4())
        
        def send_reminder_message():
            try:
                # ุงุณุชูุฑุงุฏ ุงููุธุงุฆู ููุง ูุชุฌูุจ ุงูุงุณุชูุฑุงุฏุงุช ุงูุฏุงุฆุฑูุฉ
                from study_bot.bot import send_message
                
                # ุฅุนุฏุงุฏ ูุต ุงูุชุฐููุฑ ุญุณุจ ููุน ุงููููุฉ
                reminder_message = get_reminder_text(task_name, task_type)
                
                # ุฅุฑุณุงู ุงูุชุฐููุฑ
                send_message(user_id, reminder_message)
                
                logger.info(f"ุชู ุฅุฑุณุงู ุชุฐููุฑ ุจูููุฉ {task_name} ูููุณุชุฎุฏู {user_id}")
                
                # ุฅุฒุงูุฉ ุงููุคูุช ูู ุงููุงููุณ
                with _timers_lock:
                    if timer_id in _activation_timers:
                        del _activation_timers[timer_id]
            except Exception as e:
                logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุชุฐููุฑ ุจูููุฉ: {e}")
                logger.error(traceback.format_exc())
        
        # ุฅูุดุงุก ูุคูุช ูุฅุฑุณุงู ุงูุชุฐููุฑ ุจุนุฏ ุงููุฏุฉ ุงููุญุฏุฏุฉ
        timer = Timer(time_minutes * 60, send_reminder_message)
        timer.daemon = True  # ุฌุนู ุงููุคูุช ุฎููู ูุฅููุงูู ุนูุฏ ุฅููุงู ุงูุชุทุจูู
        timer.start()
        
        # ุชุฎุฒูู ุงููุคูุช ููุฑุฌูุน ุฅููู ูุงุญูุงู
        with _timers_lock:
            _activation_timers[timer_id] = timer
        
        logger.info(f"ุชู ุฌุฏููุฉ ุชุฐููุฑ ุจูููุฉ {task_name} ูููุณุชุฎุฏู {user_id} ุจุนุฏ {time_minutes} ุฏูููุฉ")
        return timer_id
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฌุฏููุฉ ุชุฐููุฑ ุจูููุฉ: {e}")
        logger.error(traceback.format_exc())
        return None


def get_reminder_text(task_name, task_type):
    """ุงูุญุตูู ุนูู ูุต ุงูุชุฐููุฑ ุญุณุจ ููุน ุงููููุฉ"""
    # ุฑุณุงุฆู ุชุฐููุฑ ููุฌุฏูู ุงูุตุจุงุญู
    morning_reminders = {
        "prayer_1": "๐ <b>ุชุฐููุฑ: ุตูุงุฉ ุงููุฌุฑ</b>\n\nููุฏ ุญุงู ููุช ุตูุงุฉ ุงููุฌุฑ. ูุง ุชูุณู ุฃุฏุงุก ุงูุตูุงุฉ ูู ููุชูุง.",
        "meal_1": "โ <b>ุชุฐููุฑ: ููุช ุงูุฅูุทุงุฑ</b>\n\nูู ุงูููู ุชูุงูู ูุฌุจุฉ ุฅูุทุงุฑ ุตุญูุฉ ููุชูุงุฒูุฉ ูุจุฏุก ูููู ุจูุดุงุท.",
        "study_1": "๐ <b>ุชุฐููุฑ: ุจุฏุก ุงููุฐุงูุฑุฉ</b>\n\nุญุงู ููุช ุงูุจุฏุก ูู ุงููุฐุงูุฑุฉ. ุฎุตุต ุงูููุช ุงููุงูู ููุชุฑููุฒ.",
        "prayer_2": "๐ <b>ุชุฐููุฑ: ุตูุงุฉ ุงูุธูุฑ</b>\n\nููุฏ ุญุงู ููุช ุตูุงุฉ ุงูุธูุฑ. ุฎุฐ ุงุณุชุฑุงุญุฉ ูุฃุฏุงุก ุงูุตูุงุฉ.",
        "study_2": "โ๏ธ <b>ุชุฐููุฑ: ุงููุฐุงูุฑุฉ ุจุนุฏ ุงูุธูุฑ</b>\n\nุงุณุชุฃูู ุงููุฐุงูุฑุฉ ุจุนุฏ ุงูุธูุฑ ุจูุดุงุท ูุชุฑููุฒ.",
        "prayer_3": "๐ <b>ุชุฐููุฑ: ุตูุงุฉ ุงูุนุตุฑ</b>\n\nููุฏ ุญุงู ููุช ุตูุงุฉ ุงูุนุตุฑ. ูุง ุชูุณู ุฃุฏุงุก ุงูุตูุงุฉ ูู ููุชูุง.",
        "study_3": "๐ <b>ุชุฐููุฑ: ุงููุฑุงุฌุนุฉ</b>\n\nุฎุตุต ููุชูุง ูููุฑุงุฌุนุฉ ูุชุซุจูุช ุงููุนูููุงุช.",
        "prayer_4": "๐ <b>ุชุฐููุฑ: ุตูุงุฉ ุงููุบุฑุจ</b>\n\nููุฏ ุญุงู ููุช ุตูุงุฉ ุงููุบุฑุจ. ุฎุฐ ุงุณุชุฑุงุญุฉ ูุฃุฏุงุก ุงูุตูุงุฉ.",
        "prayer_5": "๐ <b>ุชุฐููุฑ: ุตูุงุฉ ุงูุนุดุงุก</b>\n\nููุฏ ุญุงู ููุช ุตูุงุฉ ุงูุนุดุงุก. ูุง ุชูุณู ุฃุฏุงุก ุงูุตูุงุฉ ูู ููุชูุง.",
        "evaluation": "โ๏ธ <b>ุชุฐููุฑ: ุชูููู ุงูููู</b>\n\nุญุงู ููุช ุชูููู ุฅูุฌุงุฒุงุช ุงูููู ูุงูุชุฎุทูุท ููููู ุงูุชุงูู."
    }
    
    # ุฑุณุงุฆู ุชุฐููุฑ ููุฌุฏูู ุงููุณุงุฆู
    evening_reminders = {
        "join": "๐ <b>ุชุฐููุฑ: ุจุฏุก ุงููุนุณูุฑ ุงููุณุงุฆู</b>\n\nุญุงู ููุช ุงูุจุฏุก ูู ูุนุณูุฑ ุงูุฏุฑุงุณุฉ ุงููุณุงุฆู.",
        "study_1": "๐ <b>ุชุฐููุฑ: ููุช ุงููุฑุงุฌุนุฉ</b>\n\nุญุงู ููุช ูุฑุงุฌุนุฉ ูุง ุณุจู ุฏุฑุงุณุชู. ุฑูุฒ ุนูู ุงูููุงุท ุงููููุฉ.",
        "prayer_1": "๐ <b>ุชุฐููุฑ: ุตูุงุฉ ุงููุบุฑุจ</b>\n\nููุฏ ุญุงู ููุช ุตูุงุฉ ุงููุบุฑุจ. ุฎุฐ ุงุณุชุฑุงุญุฉ ูุฃุฏุงุก ุงูุตูุงุฉ.",
        "study_2": "โ๏ธ <b>ุชุฐููุฑ: ุงููุงุฌุจุงุช ูุงูุชุฏุฑูุจุงุช</b>\n\nุญุงู ููุช ุงูุนูู ุนูู ุงููุงุฌุจุงุช ูุญู ุงูุชุฏุฑูุจุงุช.",
        "prayer_2": "๐ <b>ุชุฐููุฑ: ุตูุงุฉ ุงูุนุดุงุก</b>\n\nููุฏ ุญุงู ููุช ุตูุงุฉ ุงูุนุดุงุก. ูุง ุชูุณู ุฃุฏุงุก ุงูุตูุงุฉ ูู ููุชูุง.",
        "study_3": "๐ <b>ุชุฐููุฑ: ุงููุฑุงุกุฉ ูุงูุญูุธ</b>\n\nุฎุตุต ููุชูุง ูููุฑุงุกุฉ ุฃู ุงูุญูุธ ูุชุฑุณูุฎ ุงููุนูููุงุช.",
        "evaluation": "โ๏ธ <b>ุชุฐููุฑ: ุชูููู ุงูููู</b>\n\nุญุงู ููุช ุชูููู ุฅูุฌุงุฒุงุช ุงูููู ูุงูุชุฎุทูุท ููููู ุงูุชุงูู.",
        "early_sleep": "๐ค <b>ุชุฐููุฑ: ุงูููู ุงููุจูุฑ</b>\n\nุญุงู ููุช ุงูุงุณุชุนุฏุงุฏ ููููู ูุจูุฑูุง ููุงุณุชููุงุธ ูุดูุทูุง ุบุฏูุง."
    }
    
    # ุชุญุฏูุฏ ูุฌููุนุฉ ุงูุชุฐููุฑุงุช ุงูููุงุณุจุฉ ุญุณุจ ููุน ุงูุฌุฏูู
    if task_type == 'morning':
        reminders = morning_reminders
    elif task_type == 'evening':
        reminders = evening_reminders
    else:
        # ุชุฐููุฑ ุงูุชุฑุงุถู ูููุนุณูุฑุงุช ุงููุฎุตุตุฉ
        return f"โฐ <b>ุชุฐููุฑ: {task_name}</b>\n\nุญุงู ููุช ุฅููุงู ูุฐู ุงููููุฉ ูู ุฌุฏููู ุงูุฏุฑุงุณู."
    
    # ุฅุฑุฌุงุน ุงูุชุฐููุฑ ุงูููุงุณุจ ุฃู ุชุฐููุฑ ุงูุชุฑุงุถู
    return reminders.get(task_name, f"โฐ <b>ุชุฐููุฑ: {task_name}</b>\n\nูุฏูู ูููุฉ ูู ุฌุฏููู ุงูุฏุฑุงุณู.")


def cancel_all_timers():
    """ุฅูุบุงุก ุฌููุน ุงููุคูุชุงุช ุงููุดุทุฉ"""
    try:
        with _timers_lock:
            for timer_id, timer in list(_activation_timers.items()):
                timer.cancel()
                del _activation_timers[timer_id]
        
        logger.info(f"ุชู ุฅูุบุงุก {len(_activation_timers)} ูุคูุช ูุดุท")
        return True
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅูุบุงุก ุงููุคูุชุงุช ุงููุดุทุฉ: {e}")
        logger.error(traceback.format_exc())
        return False